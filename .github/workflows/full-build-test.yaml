name: Full Build Test (Manual)

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating System to test'
        required: true
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - debian
      run_full_build:
        description: 'Run full build process'
        required: true
        default: false
        type: boolean

jobs:
  full-test:
    name: Full Test on ${{ github.event.inputs.os }}
    runs-on: ubuntu-latest
    container:
      image: ${{ github.event.inputs.os }}:${{ github.event.inputs.os == 'ubuntu' && '24.04' || '12' }}
      options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          # Update package lists
          apt-get update
          
          # Install basic utilities
          apt-get install -y git curl wget

      - name: Test pre-install script structure
        run: |
          # Make scripts executable
          chmod +x pre-install.sh
          chmod +x dep-*.sh
          
          # Check syntax
          bash -n pre-install.sh
          bash -n dep-*.sh
          
          # Test basic functionality without running the full script
          timeout 300 bash -c '
            set -e
            
            # Create mock environment for testing
            export SCRIPT_DIR=$PWD
            export BASE_IMG_REPO_DIR=$PWD/base-images
            export SOURCE_DIR=$PWD/image-source
            
            # Create necessary directories
            mkdir -p $SOURCE_DIR
            
            # Extract only function definitions from the script for testing
            # This prevents execution of build functions while still testing structure
            grep "^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*()[[:space:]]*{" pre-install.sh > /dev/null && {
              echo "✅ Function definitions found in script"
            } || {
              echo "❌ No function definitions found"
              exit 1
            }
            
            # Test specific required functions exist
            grep -q "git_clone[[:space:]]*()" pre-install.sh && {
              echo "✅ git_clone function definition found"
            } || {
              echo "❌ git_clone function not found"
              exit 1
            }
            
            grep -q "remove_build_folder[[:space:]]*()" pre-install.sh && {
              echo "✅ remove_build_folder function definition found"
            } || {
              echo "❌ remove_build_folder function not found"
              exit 1
            }
            
            # Test OS detection capability
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              echo "Detected OS: $ID"
              if [ "$ID" = "ubuntu" ] || [ "$ID" = "debian" ]; then
                echo "✅ OS detection working correctly"
              else
                echo "⚠️ OS detection found: $ID"
              fi
            fi
            
            # Test script syntax without execution
            bash -n pre-install.sh && {
              echo "✅ Script syntax is valid"
            } || {
              echo "❌ Script syntax errors found"
              exit 1
            }
            
            echo "✅ Script structure validation passed"
          ' || {
            echo "❌ Script structure validation failed"
            exit 1
          }

      - name: Run full build test (if requested)
        if: ${{ github.event.inputs.run_full_build == 'true' }}
        run: |
          echo "🚀 Starting full build test (this will take 30+ minutes)..."
          
          # Set environment variables to control the build
          export CI=true
          export BUILD_TIMEOUT=1800  # 30 minutes

          # Create necessary environment for the build
          mkdir -p image-source
          
          # Fix locale.gen issue for container environment
          if [ ! -f /etc/locale.gen ]; then
            echo "Creating locale.gen for container environment..."
            mkdir -p /etc
            echo "# en_US.UTF-8 UTF-8" > /etc/locale.gen
          fi
          
          # Override the change_locale function to avoid locale-gen issues
          # Create a wrapper script that overrides the problematic function
          cat > mock_locale.sh << 'EOF'
          #!/bin/bash
          change_locale() {
            echo "Mock change_locale function - skipping locale setup for testing"
          }
          export change_locale
          # Source the original script with our override
          source pre-install.sh "$@"
          EOF
          chmod +x mock_locale.sh
          
          # Track build status
          BUILD_SUCCESS=false
          
          # Run the pre-install script with timeout using our wrapper
          if timeout $BUILD_TIMEOUT bash mock_locale.sh; then
            echo "✅ Full build test completed successfully"
            BUILD_SUCCESS=true
          else
            echo "❌ Build test failed or timed out"
            echo "Exit code: $?"
            echo "This may be due to:"
            echo "- Missing build dependencies"
            echo "- Network connectivity issues"
            echo "- Insufficient system resources"
            echo "- Build environment configuration issues"
            echo "- Timeout (30 minutes exceeded)"
            BUILD_SUCCESS=false
          fi
          
          # Report final status
          if [ "$BUILD_SUCCESS" = "true" ]; then
            echo "✅ BUILD SUCCESS: Full build test passed"
            exit 0
          else
            echo "❌ BUILD FAILURE: Full build test failed"
            echo "Please check the logs above for specific error details"
            echo "Note: Full builds in CI may fail due to resource constraints"
            exit 1
          fi

      - name: Test script completion (without full build)
        if: ${{ github.event.inputs.run_full_build == 'false' }}
        run: |
          echo "🧪 Testing script execution (without full build)..."
          
          # Test that the script can run through its initial phases
          timeout 300 bash -c '
            set -e
            
            # Create a mock environment for testing
            export SCRIPT_DIR=$PWD
            export BASE_IMG_REPO_DIR=$PWD/base-images
            export SOURCE_DIR=$PWD/image-source
            
            # Create necessary directories
            mkdir -p $SOURCE_DIR
            
            # Test script startup and basic functionality
            echo "Testing script startup..."
            
            # Test that the script can be executed (just the first few lines)
            head -20 pre-install.sh | bash -s || {
              echo "❌ Script startup failed"
              exit 1
            }
            
            # Test that the script has the expected structure
            echo "Testing script structure..."
            
            # Check for required sections
            grep -q "Common variables" pre-install.sh && {
              echo "✅ Script has common variables section"
            } || {
              echo "❌ Missing common variables section"
              exit 1
            }
            
            grep -q "Git clone function" pre-install.sh && {
              echo "✅ Script has git clone function"
            } || {
              echo "❌ Missing git clone function"
              exit 1
            }
            
            # Test that the script can detect the OS
            echo "Testing OS detection..."
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              echo "Detected OS: $ID"
              if [ "$ID" = "ubuntu" ] || [ "$ID" = "debian" ]; then
                echo "✅ OS detection working correctly"
              else
                echo "⚠️ OS detection found: $ID"
              fi
            fi
            
            echo "✅ Script completion test passed"
          ' || {
            echo "❌ Script execution test failed"
            echo "This indicates issues with script startup or basic functionality"
            exit 1
          }

      - name: Generate test report
        run: |
          echo "📊 Test Report for ${{ github.event.inputs.os }}"
          echo "=================================="
          echo "OS: ${{ github.event.inputs.os }}"
          echo "Full Build: ${{ github.event.inputs.run_full_build }}"
          echo "Timestamp: $(date)"
          echo "Git SHA: ${{ github.sha }}"
          echo "=================================="
          
          # Check if key files exist
          echo "File checks:"
          ls -la pre-install.sh dep-*.sh || echo "Some dependency files missing"
          
          echo "✅ Test report generated" 